{"version":3,"sources":["hooks/use_state.js","hooks/use_effect.js","hooks/use_context.js","hooks/use_ref.js","hooks/use_reducer.js","hooks/use_memo.js","hooks/use_callback.js","App.js","reportWebVitals.js","index.js"],"names":["FunctionUsingUseState","useState","count","setCount","onClick","UseStateUseEffect","useEffect","console","log","moods","happy","angry","MoodContext","createContext","FunUseContext","mood","setMood","Provider","value","MoodEmoji","MoodEmojiCons","useContext","Consumer","FunctionUsingUseRef","myBtn","useRef","ref","current","click","reducer","state","action","type","useReducer","dispatch","style","fontSize","width","FunUseMemo","expensiveCount","useMemo","FunUseCallback","showCount","useCallback","ChildOne","handler","props","ChildTwo","ChildThree","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c7b767f.chunk.js","sourcesContent":["import { useState } from 'react';\nexport default function FunctionUsingUseState(){\n    const [count, setCount] = useState(0);\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>\n            Count : {count}\n            </button>\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nexport default function UseStateUseEffect(){\n    const [count, setCount] = useState(0);\n    useEffect(() => {\n        console.log('Use Effect is called');\n    }, [count]);\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>\n                Count : {count}\n            </button>\n        </div>\n    );\n}\n","import { useState, useContext, createContext } from 'react';\n\nconst moods = {\n    happy: 'üòÅ',\n    angry: 'ü§¨'\n}\n\nconst MoodContext = createContext(moods);\n\nexport default function FunUseContext(){\n    const [mood, setMood] = useState('üòÅ');\n    return (\n        <MoodContext.Provider value={mood}>\n            <div>\n                <button onClick={() => setMood('ü§¨')}>Angry</button>\n                <button onClick={() => setMood('üòÅ')}>Happy</button>\n                <button onClick={() => setMood('üòî')}>Sad</button>\n                <p>I am in <i>Parent</i> Function : {mood}</p>\n            </div>\n            <MoodEmoji/>\n            <MoodEmojiCons/>\n        </MoodContext.Provider>\n    );\n}\n\nfunction MoodEmoji(){\n    const mood = useContext(MoodContext);\n    return (\n        <div>\n            <p>I am Inside <i>useContext</i> Function : {mood}</p>\n        </div> \n    );\n}\n\nfunction MoodEmojiCons(){\n    return (\n        <div>\n            <MoodContext.Consumer>\n                { mood => <p> I am Inside <i>Consumer</i> Function : {mood}</p> }\n            </MoodContext.Consumer>\n        </div>\n    );\n}","import { useRef } from 'react';\nexport default function FunctionUsingUseRef(){\n    const myBtn = useRef(null);\n\n    const clickIt = () => myBtn.current.click();\n    const helloButtonClicked = () => console.log('hello button clicked');\n\n    return (\n        <div>\n            <p>Check the console.</p>\n            <button ref={myBtn} onClick={helloButtonClicked}>Hello Button</button>\n            <button onClick={clickIt}>Click Me! When You Click Me, You Indirectly Click 'Hello Button', Isn't that interesting.</button>\n        </div> \n    );\n}\n","import { useReducer } from 'react';\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\nexport default function FunctionUsingUseState(){\n    const [count, dispatch] = useReducer(reducer, 0);\n    return (\n        <div>\n            <h3>{count}</h3>\n            <button style={{fontSize: 30, width: 40}} onClick={() => dispatch({type: 'INCREMENT'})}>+</button>\n            <button style={{fontSize: 30, width: 40}} onClick={() => dispatch({type: 'DECREMENT'})}>-</button>\n        </div>\n    );\n}\n","import { useMemo, useState } from 'react';\nexport default function FunUseMemo(){\n    const [count, setCount] = useState(60);\n\n    // useMemo is a higher-order component that takes a function as an argument\n    // and returns a memoized version of that function.\n    \n    const expensiveCount = useMemo(() => {\n        return count ** 2;\n    }, [count]);\n\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>\n            Count : {count}\n            </button>\n            <p>Expensive Count : {expensiveCount}</p>\n        </div>\n    );\n}\n","import { useMemo, useState, useCallback } from 'react';\n\nexport default function FunUseCallback(){\n    const [count, setCount] = useState(60);\n\n    // useMemo is a higher-order component that takes a function as an argument\n    // and returns a memoized version of that function.\n    \n    const expensiveCount = useMemo(() => {\n        return count ** 2;\n    }, [count]);\n\n    const showCount = useCallback(() => {\n        console.log(`Show Count is Clicked: ${count}`);\n    }, [count]);\n\n    // const showCount = () => {\n    //     alert(`Show Count is Clicked: ${count}`);\n    // }\n\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>\n            Count : {count}\n            </button>\n            <p>Expensive Count : {expensiveCount}</p>\n            <ChildOne handler={showCount} />\n        </div>\n    );\n}\n\n\nfunction ChildOne(props){\n    return(\n        <div>\n            <button onClick={props.handler}>I am inside Child One</button>\n            <ChildTwo handler={props.handler} />\n        </div>\n    )\n}  \nfunction ChildTwo(props){\n    return(\n        <div>\n            <button onClick={props.handler}>I am inside Child Three</button>\n            <ChildThree handler={props.handler}/>\n        </div>\n    )\n}\n\nfunction ChildThree(props){\n    return(\n        <div>\n            <button onClick={props.handler}>I am inside Child Two</button>\n        </div>\n    )\n}  ","import './App.css';\nimport HookUseState from './hooks/use_state'\nimport HookUseEffect from './hooks/use_effect'\nimport HookUseContext from './hooks/use_context'\nimport HookUseRef from './hooks/use_ref'\nimport HookUseReducer from './hooks/use_reducer'\nimport HookUseMemo from './hooks/use_memo'\nimport HookUseCallback from './hooks/use_callback'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div>\n            <h1>React Hooks</h1>\n            <ol>\n              <li>\n                <h3>useState</h3>\n                <p>Every time you update the state using the second button, The component will call the <strong><i>useState()</i></strong>, and update the <i>count</i> variable with the new value.</p>\n                <HookUseState />\n              </li>\n              <li>\n                <h3>useEffect</h3>\n                <p>Every time you update the state using the second button, The component will call the <strong><i>useEffect()</i></strong>, and execute everything that's inside them.</p>\n                <p>See the output in the Console.</p>\n                <HookUseEffect/>\n              </li>\n              <li>\n                <h3>useContext</h3>\n                <p>When you click on any button to change the state of the <i>Parent Component</i>, \n                It will automatically update the value in the clild functions without actually passing the value in props, through <i>useContext() and createContext()</i>.</p>\n                <HookUseContext/>\n              </li>\n              <li>\n                <h3>useRef</h3>\n                <p>It's a way to create a reference to a value in the component, and use it in the component's lifecycle.</p>\n                <p>It is <i>Mutable</i>, but, it doesn't re-render UI. It is mainly used to grab</p>\n                <p>More common usecase of <i>useRef</i> is to grab native HTML elements from JSX.</p>\n                <HookUseRef />\n              </li>\n              <li>\n                <h3>useReducer</h3>\n                <p>Redux type of functionality, to <strong><i>useReducer</i></strong>  to update state in Functional Components in React.</p>\n                <HookUseReducer />\n              </li>\n              <li>\n                <h3>useMemo</h3>\n                <p>useMemo is a higher-order component that takes a function as an argument and returns a memoized version of that function.</p>\n                <HookUseMemo />\n              </li>\n              <li>\n                <h3>useCallback</h3>\n                <p>In order to <i>Memoize</i> a whole function, <i>useCallback</i> is used.</p>\n                <p>\n                  The <i>showCount</i> function is called from multiple childs in the same DOM Tree, they will help prevent <i>un-necessary</i> re-renders of the same object as they will\n                  be using the same function object.\n                </p>\n                <HookUseCallback />\n              </li>\n              <li>\n                <h3>useLayoutEffect</h3>\n                <p>It is similar to <i>useEffect</i> with a small difference.  <br></br>\n                It runs after <i>render</i> but before it it is visually updated. <br></br>\n                It blocks visual updates until the Callback exection is finished.</p>\n              </li>\n            </ol>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}